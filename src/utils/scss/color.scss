@use "sass:color";
@use "map"  as *; 
@use "list" as *;
@use "meta" as *;
@use "utils" as *;
@use "math" as *;

/* 
 * Função que mistura múltiplas cores
 * @param {map} $color1 - Cor base com propriedades color e percent
 * @param {color...} $colors - Lista de cores adicionais para misturar
 * @return {color} Cor resultante da mistura
 */
// @function mix($color1, $color2, $weight){}
@function mix($color1: (black, 0%), $colors...) {
  @if length($colors) >= 2 {
    $second: nth($colors, 1);
    $third: nth($colors, 2);    
    @if type-of($third) == "number" {
      @return color.mix($color1, $second, $third);
    }
  }
  @else {
    $result: $color1;
    @each $color in $colors {
      $result: color-mix(in srgb, $result, $color);
    }
    @return $result;
  }
  @return null;
}

@function invert($color) {
  @return color.invert($color);
}

/* 
 * Função que multiplica duas cores RGB
 * @param {color} $rgb1 - Primeira cor RGB
 * @param {color} $rgb2 - Segunda cor RGB
 * @return {color} Nova cor RGB resultante da multiplicação
 */
 @function multiply($rgb1, $rgb2) {
  $r: floor(div(channel($rgb1, "red", $space: rgb)    * channel($rgb2, "red", $space: rgb), 255));
  $g: floor(div(channel($rgb1, "green", $space: rgb)  * channel($rgb2, "green", $space: rgb), 255));
  $b: floor(div(channel($rgb1, "blue", $space: rgb)   * channel($rgb2, "blue", $space: rgb), 255));
  @return rgb($r, $g, $b);
}

/* 
 * Função que calcula o brilho de uma cor
 * @param {color} $color - Cor para calcular o brilho
 * @return {number} Valor do brilho (0-255)
 */
@function getBrightness($color) {
  @return div(
    channel($color, "red", $space: rgb) * 299 + 
    channel($color, "green", $space: rgb) * 587 + 
    color-channel($color, "blue", $space: rgb) * 114, 
    1000
  );
}

/* 
 * Função que verifica se uma cor é clara
 * @param {color} $color - Cor para verificar
 * @return {boolean} True se a cor for clara, False se for escura
 */
@function isLight($color) {
  @return getBrightness($color) >= 128;
}

/* 
 * Função que determina a cor de contraste ideal (preto ou branco)
 * @param {color} $color - Cor base para determinar o contraste
 * @return {color} #000 para cores claras, #fff para cores escuras
 */
@function getContrast($color) {
  @if isLight($color) {
    @return #000;
  } @else {
    @return #fff;
  }
}

@function gradiant($baseColor: red, $keys: (0,25,50,75,100)) {
  $white: #fff;
  $black: #000000;
  $palette: ();

  @each $key in $keys {
    @if $key == 50 {
      $palette: set($palette, $key, $baseColor);
    }
    @else if $key < 50 {
      /* Convert 0-50 range to 0-100% */
      $percentage: div($key * 100, 50);
      $palette: set($palette, $key, mix($baseColor, $black, pct($percentage)));
    }
    @else {
      /* Convert 50-100 range to 0-100% */
      $percentage: div(($key - 50) * 100, 50);
      $palette: set($palette, $key, mix($white, $baseColor, pct($percentage)));
    }
  }
  @return $palette;
}

@function channel(
  $color: white, 
  $type:  "red", 
  $space: rgb
){
  @if function-exists("channel", "color") {
    @return channel($color, $type, $space);
  } @else {
    @if $type == 'red' {
      @return red($color);
    }
    @else if $type == 'green' {
      @return green($color);
    }
    @else if $type == 'blue' {
      @return blue($color);
    }
  }
}