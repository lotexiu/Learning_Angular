@use "@angular/material" as mat;

@function generate-selector-list($args...) {
  $selector: null;
  /* Percorrendo pelos lista de seletores */
  @each $class in $args {
    /* Transformando a lista de seletores em um unico seletor */
    @if $selector == null {
      $selector: $class;
    } @else {
      $selector: $selector + ", " + $class;
    }
  }
  /* Retornando resultado do seletor */
  @return $selector;
}

@function custom-color-mix($color1, $percent1, $color2, $percent2) {
  @return color-mix(in srgb, $color1 $percent1, $color2 $percent2);
}

@mixin angularMaterial($theme) {
  $primary: none;
  $accent: none;
  $warn: none;
  $error: none;
  @if mat.get-theme-type($theme) == dark {
    $primary: mat.get-theme-color($theme, primary, default);
    $accent: mat.get-theme-color($theme, accent, default);
    $warn: mat.get-theme-color($theme, warn, default);
  } @else {
    $primary: mat.get-theme-color($theme, primary, default);
    $accent: mat.get-theme-color($theme, accent, default);
    $warn: mat.get-theme-color($theme, warn, default);
  }

  mat-icon {
    transition: transform 0.2s;
    &:hover{
      transform: scale(1.3);
    }
    &:focus{
      outline: none;
      fill   : $primary;
      color  : $primary;
    }
    &:active{
      fill : $accent;
      color: $accent;
    }
  }
}

@mixin stickyStructure() {
  [sticky] {
    z-index: 1;
    position: sticky;
    padding: 5px;
    top: 0;
    &::after {
      content: "";
      position: absolute;
      inset: 0;
      z-index: -1;
      border-radius: 5px;
      background: rgba(0, 0, 0, 0.3);
      mask: linear-gradient(to top, transparent, black 50%);
      backdrop-filter: blur(3px);
    }

    &[sticky~="bottom"] {
      mask: linear-gradient(to bottom, transparent, black 50%);
      top: auto;
      bottom: 0;
    }
    &[sticky~="left"] {
      mask: linear-gradient(to left, transparent, black 50%);
      top: auto;
      left: 0;
    }
    &[sticky~="right"] {
      mask: linear-gradient(to right, transparent, black 50%);
      top: auto;
      right: 0;
    }
  }
}

@mixin padStructure($default) {
  [pad~="all"] {
    padding: $default;
  }

  [pad~="bottom"],
  [pad~="bt"] {
    padding-bottom: $default;
  }
  [pad~="top"],
  [pad~="tp"] {
    padding-top: $default;
  }
  [pad~="left"],
  [pad~="lt"] {
    padding-left: $default;
  }
  [pad~="right"],
  [pad~="rt"] {
    padding-right: $default;
  }

  @for $i from 0 through 20 {
    [pad~="#{$i}"] {
      &[pad~="all"]{
        padding: #{$i}px;
      }
      
      &[pad~="bottom"],
      &[pad~="bt"] {
        padding-bottom: #{$i}px;
      }
      &[pad~="top"],
      &[pad~="tp"] {
        padding-top: #{$i}px;
      }
      &[pad~="left"],
      &[pad~="lt"] {
        padding-left: #{$i}px;
      }
      &[pad~="right"],
      &[pad~="rt"] {
        padding-right: #{$i}px;
      }
    }
  }
}

// #{generate-selector-list(
//   '.grid',
//   '.grid-col',
//   '.grid-row',
//   '.grid-dense')} {
//     *{
//       transition: all 1s;
//     }
//     display: grid;
//     $sizes: auto, 0fr, 1fr, min-content, max-content;
//     $attrsValues: 'auto', '0fr', '1fr', 'min', 'max';
//     @include generate-grid(100, 12, $sizes, $attrsValues);
// }