@use "@angular/material" as mat;

@function generate-selector-list($args...) {
  $selector: null;
  /* Percorrendo pelos lista de seletores */
  @each $class in $args {
    /* Transformando a lista de seletores em um unico seletor */
    @if $selector == null {
      $selector: $class;
    } @else {
      $selector: $selector + ", " + $class;
    }
  }
  /* Retornando resultado do seletor */
  @return $selector;
}

@function selector($attribute, $validation: 'not', $args...) {
  $selector: '[#{$attribute}]';
  
  @each $arg in $args {
    @if $validation == 'is' {
      $selector: $selector + '[#{$attribute}~="#{$arg}"]';
    } @else if $validation == 'not' {
      $selector: $selector + ':not([#{$attribute}~="#{$arg}"])';
    } @else if $validation == '>' {
      $selector: $selector + '[#{$attribute}>#{$arg}]';
    }
  }
  
  @return $selector;
}

@function mix-v2($color1: (color: null, percent: 0), $colors...) {
  @if length($colors) == 0 {
    @return $color1;
  }
  $result: $color1;
  @each $color in $colors {
    $result: color-mix(in srgb, $result, $color);
  }
  @return $result;
}

@function get($map, $keys...){
  $value: $map;
  @each $key in $keys {
    $value: map-get($value, $key);
  }
  @return $value;
}

@mixin property($property, $type, $inherit, $value) {
  @property --#{$property} {
    syntax: $type;
    inherits: $inherit;
    initial-value: $value;
  }
  --#{$property}: #{$value}
}

@function multiply($rgb1, $rgb2) {
  $r: floor(math.div(red($rgb1) * red($rgb2), 255));
  $g: floor(math.div(green($rgb1) * green($rgb2), 255));
  $b: floor(math.div(blue($rgb1) * blue($rgb2), 255));
  @return rgb($r, $g, $b);
}
 
@function getBrightness($color) {
  @return math.div(red($color) * 299 + green($color) * 587 + blue($color) * 114, 1000);
}
 
@function isLight($color) {
  @return getBrightness($color) >= 128;
}
 
@function getContrast($color) {
  @if isLight($color) {
    @return #000;
  } @else {
    @return #fff;
  }
}