@use "sass:math" as *;
@use "sass:map";
@use "sass:color" as *;
@use "sass:string" as *;
@use "sass:meta" as *;
@use "@angular/material" as mat;

/* 
 * Função que gera uma lista de seletores CSS concatenados
 * @param {string...} $args - Lista variável de seletores CSS
 * @return {string} String concatenada de seletores separados por vírgula
 */
@function selectorList($args...) {
  $selector: null;
  /* Percorrendo pelos lista de seletores */
  @each $class in $args {
    /* Transformando a lista de seletores em um unico seletor */
    @if $selector == null {
      $selector: $class;
    } @else {
      $selector: $selector + ", " + $class;
    }
  }
  /* Retornando resultado do seletor */
  @return $selector;
}

/* 
 * Função que cria seletores de atributos com validações
 * @param {string} $attribute - Nome do atributo
 * @param {string} $validation - Tipo de validação ('is', 'not' ou '>')
 * @param {string...} $args - Valores para validação
 * @return {string} Seletor CSS completo
 */
@function selector($attribute, $validation: 'not', $args...) {
  $selector: '[#{$attribute}]';


  @each $arg in $args {
    @if $validation == 'is' {
      $selector: $selector + '[#{$attribute}~="#{$arg}"]';
    } @else if $validation == 'not' {
      $selector: $selector + ':not([#{$attribute}~="#{$arg}"])';
    } @else if $validation == '>' {
      $selector: $selector + '[#{$attribute}>#{$arg}]';
    }
  }
  
  
  @return $selector;
}

/* 
 * Mixin que define uma propriedade CSS customizada
 * @param {string} $property - Nome da propriedade
 * @param {string} $type - Sintaxe da propriedade
 * @param {boolean} $inherit - Se a propriedade é herdada
 * @param {*} $value - Valor inicial da propriedade
 */
@mixin property($property, $type, $inherit, $value) {
  @property --#{$property} {
    syntax: $type;
    inherits: $inherit;
    initial-value: $value;
  }
  // > {
  //   --#{$property}: #{$value}
  // }
  // & {
  // }
}

@function pct($value) {
  @return $value * 1%;
}