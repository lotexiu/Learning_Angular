@use 'sass:map';
@use 'sass:color';
@use 'sass:math';
@use './utils' as *;


@function gradiant($baseColor: red, $keys: (0,25,50,75,100)) {
  $white: #fff;
  $black: #000000;
  $palette: ();
  @each $key in $keys {
    @if $key == 50 {
      $palette: map.set($palette, $key, $baseColor);
    }
    @if $key == 0 {
      $palette: map.set($palette, $key, rgb(0,0,0));
    }
    @else if $key < 50 {
      /* Convert 0-50 range to 0-100% */
      $percentage: math.div($key * 100, 50);
      $palette: map.set($palette, $key, color.mix($baseColor, $black, pct($percentage)));
    }
    @else {
      /* Convert 50-100 range to 0-100% */
      $percentage: math.div(($key - 50) * 100, 50);
      $palette: map.set($palette, $key, color.mix($white, $baseColor, pct($percentage)));
    }
  }
  @return $palette;
}


@function palette(
  $primary:   rgb(160, 0, 196),
  $secondary: rgb(255, 128, 0),
  $tertiary:  rgb(0, 81, 255),
  $neutral:   rgb(92, 59, 113),
  $error:     rgb(145, 0, 0)
) {
  $keys: (0,10,20,25,30,35,40,50,60,70,80,90,95,98,99,100);
  $primary-palette:   gradiant($primary, $keys);
  $secondary-palette: gradiant($secondary, $keys);
  $tertiary-palette:  gradiant($tertiary, $keys);
  $error-palette:   gradiant($error,  $keys);

  $neutral-variant: color.mix(color.mix($primary, $neutral, 62%), white, 78%);
  $neutral-variant-palette: gradiant($neutral-variant, $keys);

  $keys: map.keys(map.merge(newMap($keys...), newMap(4,6,12,17,22,24,87,92,94,96)));
  $neutral-palette: gradiant($neutral, $keys);

  @return (
    primary: map.merge(
      $primary-palette, (
        secondary: $secondary-palette,
        neutral: $neutral-palette,
        neutral-variant: $neutral-variant-palette,
        error: $error-palette
      )
    ),

    tertiary: map.merge(
      $tertiary-palette, (
        secondary: $secondary-palette,
        neutral: $neutral-palette,
        neutral-variant: $neutral-variant-palette,
        error: $error-palette
      )
    )
  );
}

@function themeCopy($theme) {
  @return (
    color: (
      type    : get($theme, color, theme-type),
      primary : get($theme, color, primary),
      tertiary: get($theme, color, tertiary),
    ),
    typography: Roboto,
    density   : get($theme, density),
  );
}